/*
两数相加

给出两个 非空 的链表用来表示两个非负的整数。其中，它们各自的位数是按照 逆序 的方式存储的，并且它们的每个节点只能存储 一位 数字。

如果，我们将这两个数相加起来，则会返回一个新的链表来表示它们的和。

您可以假设除了数字 0 之外，这两个数都不会以 0 开头。

示例：

输入：(2 -> 4 -> 3) + (5 -> 6 -> 4)
输出：7 -> 0 -> 8
原因：342 + 465 = 807
*/

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
 
class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        ListNode headNode = new ListNode(0);
		    ListNode node = headNode;

        int carry = 0;
        for (; null != l1 && null != l2; l1 = l1.next, l2 = l2.next) {//共同不为空正常相加进位
          int num = 0;
          if (null != l1 && null != l2) {
            num = l1.val + l2.val + carry;
          } else {
            num = carry;
          }
          if (num >= 10) {
            carry = 1;
            num %= 10;
          } else {
            carry = 0;
          }
          headNode.next = new ListNode(num);
          headNode = headNode.next;
          headNode.next = null;
        }

        for(;null != l1;l1 = l1.next) {
          int num = l1.val + carry;
          if (num >= 10) {
            carry = 1;
            num %= 10;
          } else {
            carry = 0;
          }
          headNode.next = new ListNode(num);
          headNode = headNode.next;
          headNode.next = null;
        }
        for(;null != l2;l2 = l2.next) {
          int num = l2.val + carry;
          if (num >= 10) {
            carry = 1;
            num %= 10;
          } else {
            carry = 0;
          }
          headNode.next = new ListNode(num);
          headNode = headNode.next;
          headNode.next = null;
        }

        if (carry == 1) {//最后进位
          headNode.next = new ListNode(1);
          headNode = headNode.next;
          headNode.next = null;
        }

        node = node.next;

        return node;
    }
}
